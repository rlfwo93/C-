//후입선출 stack

//객체지향 방법을 사용 .



#include <stdio.h>

#include <stdlib.h>



//차후에 스택이 필요하면 여기만 복사하여 붙힌다.



#define MAX_STACK_SIZE 100
#define MAZE_SIZE 6


typedef struct {
	short r;
	short c;
}element;

typedef struct {

	element data[MAX_STACK_SIZE];

	int top;

}StackType;



//스택 초기화 함수

void init_stack(StackType* s) {

	s->top = -1;

}



//공백 상태 검출 

int is_empty(StackType* s) {

	return (s->top == -1);

}

//포화 상태 검출

int is_full(StackType* s) {

	return (s->top == (MAX_STACK_SIZE - 1));

}



//삽입 함수



void push(StackType* s, element item) {

	if (is_full(s)) {

		fprintf(stderr, "스텍포화 에러\n"); // 기본 에러 출력 

		return;



	}

	else s->data[++(s->top)] = item;

}

//삭제 함수

element pop(StackType* s) {

	if (is_empty(s)) {

		fprintf(stderr, "스택 공백 에러\n");

		exit(1);

	}

	else return s->data[(s->top)--];

}

//피크 함수

element peak(StackType* s) {

	if (is_empty(s)) {

		fprintf(stderr, "스택공백에러\n");

		exit(1);

	}

	else return s->data[s->top];

}

element here = { 1,0 }, entry = { 1,0 };
char maze[MAZE_SIZE][MAZE_SIZE] = {
	{'1','1','1','1','1','1'},
	{'e','0','1','0','0','1'},
	{'1','0','0','0','1','1'},
	{'1','0','1','0','1','1'},
	{'1','0','1','0','0','x'},
	{'1','1','1','1','1','1'},
};
void push_loc(StackType* s, int r, int c) {
	if (r < 0 || c < 0) return;
	if (maze[r][c] != '1' && maze[r][c] != '.') {
		element tmp;
		tmp.r = r;
		tmp.c = c;
		push(s, tmp);
	}
}

void maze_print(char maze[MAZE_SIZE][MAZE_SIZE]) {
	printf("\n");
	for (int r = 0; r < MAZE_SIZE; r++) {
		for (int c = 0; c < MAZE_SIZE; c++) {
			printf("%c", maze[r][c]);
		}
		printf("\n");
	}
}

int main(void) {
	int  r, c;
	StackType s;



	init_stack(&s);

	here = entry;
	while (maze[here.r][here.c] != 'x') {
		r = here.r;
		c = here.c;
		maze[r][c] = '.';
		maze_print(maze);
		push_loc(&s, r - 1, c);
		push_loc(&s, r + 1, c);
		push_loc(&s, r,c, -1);
		push_loc(&s, r ,c+1);
	}

}
