#include <stdio.h>
#include <stdlib.h>
#include<string.h>




#define MAX_STACK_SIZE 100

typedef char element;

typedef struct {



	element data[MAX_STACK_SIZE];



	int top;



}StackType;







//스택 초기화 함수



void init_stack(StackType* s) {



	s->top = -1;



}







//공백 상태 검출 



int is_empty(StackType* s) {



	return (s->top == -1);



}



//포화 상태 검출



int is_full(StackType* s) {



	return (s->top == (MAX_STACK_SIZE - 1));



}







//삽입 함수







void push(StackType* s, element item) {



	if (is_full(s)) {



		fprintf(stderr, "스텍포화 에러\n"); // 기본 에러 출력 



		return;







	}



	else s->data[++(s->top)] = item;



}



//삭제 함수



element pop(StackType* s) {



	if (is_empty(s)) {



		fprintf(stderr, "스택 공백 에러\n");



		exit(1);



	}



	else return s->data[(s->top)--];



}



//피크 함수



element peak(StackType* s) {



	if (is_empty(s)) {



		fprintf(stderr, "스택공백에러\n");



		exit(1);



	}



	else return s->data[s->top];



}

int prec(char op) {
	switch (op) {
	case '(': case ')': return 0;
	case '+': case '-': return 1;
	case '*': case '/': return 2;
	}
	return -1;
}

void infix_to_postfix(char exp[]) {
	int i = 0;
	char ch, top_op;
	int len = strlen(exp);
	StackType s;
	init_stack(&s);
	for (i = 0; i < len; i++) {
		ch = exp[i];
		switch (ch) {
		case '+': case'-':case'*':case'/':

			while (!is_empty(&s) && (prec(ch) <= prec(peak(&s))))
				printf("%c", pop(&s));
			push(&s, ch);
			break;
		case '(':
			push(&s, ch);
			break;
		case')':
			top_op = pop(&s);
			while (top_op != '(') {

			}
		}
	}
}
