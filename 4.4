//후입선출 stack

//객체지향 방법을 사용 .

 

#include <stdio.h>

#include <stdlib.h>

 

//차후에 스택이 필요하면 여기만 복사하여 붙힌다.

 

#define MAX_STACK_SIZE 100

typedef int element;

typedef struct {

	element data[MAX_STACK_SIZE];

	int top;

}StackType;

 

//스택 초기화 함수

void init_stack(StackType* s) {

	s->top = -1;

}

 

//공백 상태 검출 

int is_empty(StackType *s) {

	return (s->top == -1);

}

//포화 상태 검출

int is_full(StackType* s) {

	return (s->top == (MAX_STACK_SIZE - 1));

}

 

//삽입 함수

 

void push(StackType* s,element item) {

	if (is_full(s)) {

		fprintf(stderr, "스텍포화 에러\n"); // 기본 에러 출력 

		return;

 

	}

	else s->data[++(s->top)] = item;

}

//삭제 함수

element pop(StackType* s) {

	if (is_empty(s)) {

		fprintf(stderr, "스택 공백 에러\n");

		exit(1);

	}

	else return s->data[(s->top)--];

}

//피크 함수

element peak(StackType* s) {

	if (is_empty(s)) {

		fprintf(stderr, "스택공백에러\n");

		exit(1);

	}

	else return s->data[s->top];

}

 

int main(void) {

	StackType* s;

	s = (StackType*)malloc(sizeof(StackType));

	init_stack(s);

	push(s, 1);

	push(s, 2);

	push(s, 3);

	printf("%d\n", pop(s));

	printf("%d\n", pop(s));

	printf("%d\n", pop(s));

	free(s);

}

